app.DOC = null;
app.INDEXDOC = {"entries":[{"name":"*()","path":"stdlib/linearalgebra/#Base.:*-Tuple{AbstractArray{T,2} where T,AbstractArray{T,2} where T}","type":"Linear Algebra"},{"name":"@async","path":"stdlib/distributed/#Base.@async","type":"Distributed Computing"},{"name":"@sync","path":"stdlib/distributed/#Base.@sync","type":"Distributed Computing"},{"name":"acos()","path":"stdlib/linearalgebra/#Base.acos-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"acosh()","path":"stdlib/linearalgebra/#Base.acosh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"adjoint()","path":"stdlib/linearalgebra/#Base.adjoint","type":"Linear Algebra"},{"name":"asin()","path":"stdlib/linearalgebra/#Base.asin-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"asinh()","path":"stdlib/linearalgebra/#Base.asinh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"atan()","path":"stdlib/linearalgebra/#Base.atan-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"atanh()","path":"stdlib/linearalgebra/#Base.atanh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"atreplinit()","path":"stdlib/repl/#Base.atreplinit","type":"The Julia REPL"},{"name":"Base64","path":"stdlib/base64/","type":"Base64"},{"name":"Base64.base64decode()","path":"stdlib/base64/#Base64.base64decode","type":"Base64"},{"name":"Base64.Base64DecodePipe","path":"stdlib/base64/#Base64.Base64DecodePipe","type":"Base64"},{"name":"Base64.base64encode()","path":"stdlib/base64/#Base64.base64encode","type":"Base64"},{"name":"Base64.Base64EncodePipe","path":"stdlib/base64/#Base64.Base64EncodePipe","type":"Base64"},{"name":"Base64.stringmime()","path":"stdlib/base64/#Base64.stringmime","type":"Base64"},{"name":"bind()","path":"stdlib/sockets/#Base.bind","type":"Sockets"},{"name":"Calling C and Fortran Code","path":"manual/calling-c-and-fortran-code/","type":"Manual"},{"name":"ceil()","path":"stdlib/dates/#Base.ceil-Tuple{TimeType,Period}","type":"Dates"},{"name":"ceil()","path":"stdlib/dates/#Base.ceil-Tuple{Union{Day, Week, TimePeriod},Union{Day, Week, TimePeriod}}","type":"Dates"},{"name":"Code Loading","path":"manual/code-loading/","type":"Manual"},{"name":"Complex and Rational Numbers","path":"manual/complex-and-rational-numbers/","type":"Manual"},{"name":"Constructors","path":"manual/constructors/","type":"Manual"},{"name":"Control Flow","path":"manual/control-flow/","type":"Manual"},{"name":"Conversion and Promotion","path":"manual/conversion-and-promotion/","type":"Manual"},{"name":"copy()","path":"stdlib/linearalgebra/#Base.copy-Tuple{Union{Adjoint, Transpose}}","type":"Linear Algebra"},{"name":"CoreLogging.@logmsg","path":"stdlib/logging/#Base.CoreLogging.@logmsg","type":"Logging"},{"name":"CoreLogging.AbstractLogger","path":"stdlib/logging/#Base.CoreLogging.AbstractLogger","type":"Logging"},{"name":"CoreLogging.catch_exceptions()","path":"stdlib/logging/#Base.CoreLogging.catch_exceptions","type":"Logging"},{"name":"CoreLogging.current_logger()","path":"stdlib/logging/#Base.CoreLogging.current_logger","type":"Logging"},{"name":"CoreLogging.disable_logging()","path":"stdlib/logging/#Base.CoreLogging.disable_logging","type":"Logging"},{"name":"CoreLogging.global_logger()","path":"stdlib/logging/#Base.CoreLogging.global_logger","type":"Logging"},{"name":"CoreLogging.handle_message()","path":"stdlib/logging/#Base.CoreLogging.handle_message","type":"Logging"},{"name":"CoreLogging.LogLevel","path":"stdlib/logging/#Base.CoreLogging.LogLevel","type":"Logging"},{"name":"CoreLogging.min_enabled_level()","path":"stdlib/logging/#Base.CoreLogging.min_enabled_level","type":"Logging"},{"name":"CoreLogging.NullLogger","path":"stdlib/logging/#Base.CoreLogging.NullLogger","type":"Logging"},{"name":"CoreLogging.shouldlog()","path":"stdlib/logging/#Base.CoreLogging.shouldlog","type":"Logging"},{"name":"CoreLogging.SimpleLogger","path":"stdlib/logging/#Base.CoreLogging.SimpleLogger","type":"Logging"},{"name":"CoreLogging.with_logger()","path":"stdlib/logging/#Base.CoreLogging.with_logger","type":"Logging"},{"name":"cos()","path":"Base.cos-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Real}","type":"Linear Algebra"},{"name":"cosh()","path":"stdlib/linearalgebra/#Base.cosh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"CRC32c","path":"stdlib/crc32c/","type":"CRC32c"},{"name":"CRC32c.crc32c()","path":"stdlib/crc32c/#CRC32c.crc32c-Tuple{IO,Integer,UInt32}","type":"CRC32c"},{"name":"CRC32c.crc32c()","path":"stdlib/crc32c/#CRC32c.crc32c","type":"CRC32c"},{"name":"Dates","path":"stdlib/dates/","type":"Dates"},{"name":"Dates.@dateformat_str","path":"stdlib/dates/#Dates.@dateformat_str","type":"Dates"},{"name":"Dates.CompoundPeriod","path":"stdlib/dates/#Dates.CompoundPeriod","type":"Dates"},{"name":"Dates.CompoundPeriod()","path":"Dates.CompoundPeriod-Tuple{Array{/#s37,1} where #s37<:Period}","type":"Dates"},{"name":"Dates.Date","path":"stdlib/dates/#Dates.Date","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{TimeType}","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{AbstractString,DateFormat}","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{Int64,Int64,Int64}","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{Period}","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{Function,Any,Any,Any}","type":"Dates"},{"name":"Dates.Date()","path":"stdlib/dates/#Dates.Date-Tuple{AbstractString,AbstractString}","type":"Dates"},{"name":"Dates.date2epochdays()","path":"stdlib/dates/#Dates.date2epochdays","type":"Dates"},{"name":"Dates.DateFormat","path":"stdlib/dates/#Dates.DateFormat","type":"Dates"},{"name":"Dates.DateTime","path":"stdlib/dates/#Dates.DateTime","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-Tuple{Period}","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-Tuple{AbstractString,DateFormat}","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-Tuple{AbstractString,AbstractString}","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-Tuple{TimeType}","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-Tuple{Function,Vararg{Any,N} where N}","type":"Dates"},{"name":"Dates.DateTime()","path":"stdlib/dates/#Dates.DateTime-NTuple{7,Int64}","type":"Dates"},{"name":"Dates.datetime2epochms()","path":"stdlib/dates/#Dates.datetime2epochms","type":"Dates"},{"name":"Dates.datetime2julian()","path":"stdlib/dates/#Dates.datetime2julian","type":"Dates"},{"name":"Dates.datetime2rata()","path":"stdlib/dates/#Dates.datetime2rata","type":"Dates"},{"name":"Dates.datetime2unix()","path":"stdlib/dates/#Dates.datetime2unix","type":"Dates"},{"name":"Dates.day()","path":"stdlib/dates/#Dates.day","type":"Dates"},{"name":"Dates.Day()","path":"stdlib/dates/#Dates.Day-Tuple{TimeType}","type":"Dates"},{"name":"Dates.dayabbr()","path":"stdlib/dates/#Dates.dayabbr","type":"Dates"},{"name":"Dates.dayname()","path":"stdlib/dates/#Dates.dayname","type":"Dates"},{"name":"Dates.dayofmonth()","path":"stdlib/dates/#Dates.dayofmonth","type":"Dates"},{"name":"Dates.dayofquarter()","path":"stdlib/dates/#Dates.dayofquarter","type":"Dates"},{"name":"Dates.dayofweek()","path":"stdlib/dates/#Dates.dayofweek","type":"Dates"},{"name":"Dates.dayofweekofmonth()","path":"stdlib/dates/#Dates.dayofweekofmonth","type":"Dates"},{"name":"Dates.dayofyear()","path":"stdlib/dates/#Dates.dayofyear","type":"Dates"},{"name":"Dates.daysinmonth()","path":"stdlib/dates/#Dates.daysinmonth","type":"Dates"},{"name":"Dates.daysinyear()","path":"stdlib/dates/#Dates.daysinyear","type":"Dates"},{"name":"Dates.daysofweekinmonth()","path":"stdlib/dates/#Dates.daysofweekinmonth","type":"Dates"},{"name":"Dates.default()","path":"stdlib/dates/#Dates.default","type":"Dates"},{"name":"Dates.epochdays2date()","path":"stdlib/dates/#Dates.epochdays2date","type":"Dates"},{"name":"Dates.epochms2datetime()","path":"stdlib/dates/#Dates.epochms2datetime","type":"Dates"},{"name":"Dates.firstdayofmonth()","path":"stdlib/dates/#Dates.firstdayofmonth","type":"Dates"},{"name":"Dates.firstdayofquarter()","path":"stdlib/dates/#Dates.firstdayofquarter","type":"Dates"},{"name":"Dates.firstdayofweek()","path":"stdlib/dates/#Dates.firstdayofweek","type":"Dates"},{"name":"Dates.firstdayofyear()","path":"stdlib/dates/#Dates.firstdayofyear","type":"Dates"},{"name":"Dates.floorceil()","path":"stdlib/dates/#Dates.floorceil","type":"Dates"},{"name":"Dates.format()","path":"stdlib/dates/#Dates.format","type":"Dates"},{"name":"Dates.Hour()","path":"stdlib/dates/#Dates.Hour-Tuple{DateTime}","type":"Dates"},{"name":"Dates.hour()","path":"stdlib/dates/#Dates.hour","type":"Dates"},{"name":"Dates.Instant","path":"stdlib/dates/#Dates.Instant","type":"Dates"},{"name":"Dates.isleapyear()","path":"stdlib/dates/#Dates.isleapyear","type":"Dates"},{"name":"Dates.julian2datetime()","path":"stdlib/dates/#Dates.julian2datetime","type":"Dates"},{"name":"Dates.lastdayofmonth()","path":"stdlib/dates/#Dates.lastdayofmonth","type":"Dates"},{"name":"Dates.lastdayofquarter()","path":"stdlib/dates/#Dates.lastdayofquarter","type":"Dates"},{"name":"Dates.lastdayofweek()","path":"stdlib/dates/#Dates.lastdayofweek","type":"Dates"},{"name":"Dates.lastdayofyear()","path":"stdlib/dates/#Dates.lastdayofyear","type":"Dates"},{"name":"Dates.Microsecond()","path":"stdlib/dates/#Dates.Microsecond-Tuple{Time}","type":"Dates"},{"name":"Dates.microsecond()","path":"stdlib/dates/#Dates.microsecond","type":"Dates"},{"name":"Dates.Millisecond()","path":"stdlib/dates/#Dates.Millisecond-Tuple{DateTime}","type":"Dates"},{"name":"Dates.millisecond()","path":"stdlib/dates/#Dates.millisecond","type":"Dates"},{"name":"Dates.minute()","path":"stdlib/dates/#Dates.minute","type":"Dates"},{"name":"Dates.Minute()","path":"stdlib/dates/#Dates.Minute-Tuple{DateTime}","type":"Dates"},{"name":"Dates.Month()","path":"stdlib/dates/#Dates.Month-Tuple{TimeType}","type":"Dates"},{"name":"Dates.month()","path":"stdlib/dates/#Dates.month","type":"Dates"},{"name":"Dates.monthabbr()","path":"stdlib/dates/#Dates.monthabbr","type":"Dates"},{"name":"Dates.monthday()","path":"stdlib/dates/#Dates.monthday","type":"Dates"},{"name":"Dates.monthname()","path":"stdlib/dates/#Dates.monthname","type":"Dates"},{"name":"Dates.nanosecond()","path":"stdlib/dates/#Dates.nanosecond","type":"Dates"},{"name":"Dates.Nanosecond()","path":"stdlib/dates/#Dates.Nanosecond-Tuple{Time}","type":"Dates"},{"name":"Dates.now()","path":"stdlib/dates/#Dates.now-Tuple{Type{UTC}}","type":"Dates"},{"name":"Dates.now()","path":"stdlib/dates/#Dates.now-Tuple{}","type":"Dates"},{"name":"Dates.Period","path":"stdlib/dates/#Dates.Period","type":"Dates"},{"name":"Dates.Period()","path":"stdlib/dates/#Dates.Period-Tuple{Any}","type":"Dates"},{"name":"Dates.quarterofyear()","path":"stdlib/dates/#Dates.quarterofyear","type":"Dates"},{"name":"Dates.rata2datetime()","path":"stdlib/dates/#Dates.rata2datetime","type":"Dates"},{"name":"Dates.second()","path":"stdlib/dates/#Dates.second","type":"Dates"},{"name":"Dates.Second()","path":"stdlib/dates/#Dates.Second-Tuple{DateTime}","type":"Dates"},{"name":"Dates.Time","path":"stdlib/dates/#Dates.Time","type":"Dates"},{"name":"Dates.Time()","path":"stdlib/dates/#Dates.Time-NTuple{5,Int64}","type":"Dates"},{"name":"Dates.Time()","path":"stdlib/dates/#Dates.Time-Tuple{Function,Vararg{Any,N} where N}","type":"Dates"},{"name":"Dates.Time()","path":"stdlib/dates/#Dates.Time-Tuple{DateTime}","type":"Dates"},{"name":"Dates.Time()","path":"stdlib/dates/#Dates.Time-Tuple{TimePeriod}","type":"Dates"},{"name":"Dates.TimeType","path":"stdlib/dates/#Dates.TimeType","type":"Dates"},{"name":"Dates.today()","path":"stdlib/dates/#Dates.today","type":"Dates"},{"name":"Dates.tofirst()","path":"stdlib/dates/#Dates.tofirst","type":"Dates"},{"name":"Dates.tolast()","path":"stdlib/dates/#Dates.tolast","type":"Dates"},{"name":"Dates.tonext()","path":"stdlib/dates/#Dates.tonext-Tuple{TimeType,Int64}","type":"Dates"},{"name":"Dates.tonext()","path":"stdlib/dates/#Dates.tonext-Tuple{Function,TimeType}","type":"Dates"},{"name":"Dates.toprev()","path":"stdlib/dates/#Dates.toprev-Tuple{TimeType,Int64}","type":"Dates"},{"name":"Dates.toprev()","path":"stdlib/dates/#Dates.toprev-Tuple{Function,TimeType}","type":"Dates"},{"name":"Dates.unix2datetime()","path":"stdlib/dates/#Dates.unix2datetime","type":"Dates"},{"name":"Dates.UTInstant","path":"stdlib/dates/#Dates.UTInstant","type":"Dates"},{"name":"Dates.Week()","path":"stdlib/dates/#Dates.Week-Tuple{TimeType}","type":"Dates"},{"name":"Dates.week()","path":"stdlib/dates/#Dates.week","type":"Dates"},{"name":"Dates.Year()","path":"stdlib/dates/#Dates.Year-Tuple{TimeType}","type":"Dates"},{"name":"Dates.year()","path":"stdlib/dates/#Dates.year","type":"Dates"},{"name":"Dates.yearmonth()","path":"stdlib/dates/#Dates.yearmonth","type":"Dates"},{"name":"Dates.yearmonthday()","path":"stdlib/dates/#Dates.yearmonthday","type":"Dates"},{"name":"Delimited Files","path":"stdlib/delimitedfiles/","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any}","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any,AbstractChar,Type,AbstractChar}","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any,AbstractChar,AbstractChar}","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any,AbstractChar,Type}","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any,AbstractChar}","type":"Delimited Files"},{"name":"DelimitedFiles.readdlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.readdlm-Tuple{Any,Type}","type":"Delimited Files"},{"name":"DelimitedFiles.writedlm()","path":"stdlib/delimitedfiles/#DelimitedFiles.writedlm","type":"Delimited Files"},{"name":"Distributed Computing","path":"stdlib/distributed/","type":"Distributed Computing"},{"name":"Distributed.@distributed","path":"stdlib/distributed/#Distributed.@distributed","type":"Distributed Computing"},{"name":"Distributed.@everywhere","path":"stdlib/distributed/#Distributed.@everywhere","type":"Distributed Computing"},{"name":"Distributed.@fetch","path":"stdlib/distributed/#Distributed.@fetch","type":"Distributed Computing"},{"name":"Distributed.@fetchfrom","path":"stdlib/distributed/#Distributed.@fetchfrom","type":"Distributed Computing"},{"name":"Distributed.@spawn","path":"stdlib/distributed/#Distributed.@spawn","type":"Distributed Computing"},{"name":"Distributed.@spawnat","path":"stdlib/distributed/#Distributed.@spawnat","type":"Distributed Computing"},{"name":"Distributed.addprocs()","path":"stdlib/distributed/#Distributed.addprocs","type":"Distributed Computing"},{"name":"Distributed.CachingPool","path":"stdlib/distributed/#Distributed.CachingPool","type":"Distributed Computing"},{"name":"Distributed.channel_from_id()","path":"stdlib/distributed/#Distributed.channel_from_id","type":"Distributed Computing"},{"name":"Distributed.clear!()","path":"stdlib/distributed/#Distributed.clear!-Tuple{Any,Any}","type":"Distributed Computing"},{"name":"Distributed.clear!()","path":"stdlib/distributed/#Distributed.clear!-Tuple{CachingPool}","type":"Distributed Computing"},{"name":"Distributed.cluster_cookie()","path":"stdlib/distributed/#Distributed.cluster_cookie-Tuple{}","type":"Distributed Computing"},{"name":"Distributed.cluster_cookie()","path":"stdlib/distributed/#Distributed.cluster_cookie-Tuple{Any}","type":"Distributed Computing"},{"name":"Distributed.default_worker_pool()","path":"stdlib/distributed/#Distributed.default_worker_pool","type":"Distributed Computing"},{"name":"Distributed.Future","path":"stdlib/distributed/#Distributed.Future","type":"Distributed Computing"},{"name":"Distributed.init_worker()","path":"stdlib/distributed/#Distributed.init_worker","type":"Distributed Computing"},{"name":"Distributed.interrupt()","path":"stdlib/distributed/#Distributed.interrupt","type":"Distributed Computing"},{"name":"Distributed.launch()","path":"stdlib/distributed/#Distributed.launch","type":"Distributed Computing"},{"name":"Distributed.manage()","path":"stdlib/distributed/#Distributed.manage","type":"Distributed Computing"},{"name":"Distributed.myid()","path":"stdlib/distributed/#Distributed.myid","type":"Distributed Computing"},{"name":"Distributed.nprocs()","path":"stdlib/distributed/#Distributed.nprocs","type":"Distributed Computing"},{"name":"Distributed.nworkers()","path":"stdlib/distributed/#Distributed.nworkers","type":"Distributed Computing"},{"name":"Distributed.pmap()","path":"stdlib/distributed/#Distributed.pmap","type":"Distributed Computing"},{"name":"Distributed.process_messages()","path":"stdlib/distributed/#Distributed.process_messages","type":"Distributed Computing"},{"name":"Distributed.procs()","path":"stdlib/sharedarrays/#Distributed.procs-Tuple{SharedArray}","type":"Shared Arrays"},{"name":"Distributed.procs()","path":"stdlib/distributed/#Distributed.procs-Tuple{}","type":"Distributed Computing"},{"name":"Distributed.procs()","path":"stdlib/distributed/#Distributed.procs-Tuple{Integer}","type":"Distributed Computing"},{"name":"Distributed.remote()","path":"stdlib/distributed/#Distributed.remote","type":"Distributed Computing"},{"name":"Distributed.remotecall()","path":"stdlib/distributed/#Distributed.remotecall-Tuple{Any,AbstractWorkerPool,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remotecall()","path":"stdlib/distributed/#Distributed.remotecall-Tuple{Any,Integer,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remotecall_fetch()","path":"stdlib/distributed/#Distributed.remotecall_fetch-Tuple{Any,Integer,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remotecall_fetch()","path":"stdlib/distributed/#Distributed.remotecall_fetch-Tuple{Any,AbstractWorkerPool,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remotecall_wait()","path":"stdlib/distributed/#Distributed.remotecall_wait-Tuple{Any,Integer,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remotecall_wait()","path":"stdlib/distributed/#Distributed.remotecall_wait-Tuple{Any,AbstractWorkerPool,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.RemoteChannel","path":"stdlib/distributed/#Distributed.RemoteChannel","type":"Distributed Computing"},{"name":"Distributed.RemoteException","path":"stdlib/distributed/#Distributed.RemoteException","type":"Distributed Computing"},{"name":"Distributed.remoteref_id()","path":"stdlib/distributed/#Distributed.remoteref_id","type":"Distributed Computing"},{"name":"Distributed.remote_do()","path":"stdlib/distributed/#Distributed.remote_do-Tuple{Any,Integer,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.remote_do()","path":"stdlib/distributed/#Distributed.remote_do-Tuple{Any,AbstractWorkerPool,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"Distributed.rmprocs()","path":"stdlib/distributed/#Distributed.rmprocs","type":"Distributed Computing"},{"name":"Distributed.start_worker()","path":"stdlib/distributed/#Distributed.start_worker","type":"Distributed Computing"},{"name":"Distributed.WorkerPool","path":"stdlib/distributed/#Distributed.WorkerPool","type":"Distributed Computing"},{"name":"Distributed.workers()","path":"stdlib/distributed/#Distributed.workers","type":"Distributed Computing"},{"name":"Distributed.worker_id_from_socket()","path":"stdlib/distributed/#Distributed.worker_id_from_socket","type":"Distributed Computing"},{"name":"DL_LOAD_PATH","path":"stdlib/libdl/#Base.DL_LOAD_PATH","type":"Dynamic Linker"},{"name":"Docs.apropos()","path":"stdlib/interactiveutils/#Base.Docs.apropos","type":"Interactive Utilities"},{"name":"Documentation","path":"manual/documentation/","type":"Manual"},{"name":"Dynamic Linker","path":"stdlib/libdl/","type":"Dynamic Linker"},{"name":"Embedding Julia","path":"manual/embedding/","type":"Manual"},{"name":"Environment Variables","path":"manual/environment-variables/","type":"Manual"},{"name":"eps()","path":"stdlib/dates/#Base.eps","type":"Dates"},{"name":"exp()","path":"Base.exp-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64}}","type":"Linear Algebra"},{"name":"fetch()","path":"stdlib/distributed/#Base.fetch-Tuple{Any}","type":"Distributed Computing"},{"name":"File Events","path":"stdlib/filewatching/","type":"File Events"},{"name":"FileWatching.poll_fd()","path":"stdlib/filewatching/#FileWatching.poll_fd","type":"File Events"},{"name":"FileWatching.poll_file()","path":"stdlib/filewatching/#FileWatching.poll_file","type":"File Events"},{"name":"FileWatching.unwatch_folder()","path":"stdlib/filewatching/#FileWatching.unwatch_folder","type":"File Events"},{"name":"FileWatching.watch_file()","path":"stdlib/filewatching/#FileWatching.watch_file","type":"File Events"},{"name":"FileWatching.watch_folder()","path":"stdlib/filewatching/#FileWatching.watch_folder","type":"File Events"},{"name":"floor()","path":"stdlib/dates/#Base.floor-Union{Tuple{T}, Tuple{Union{Day, Week, TimePeriod},T}} where T<:Union{Day, Week, TimePeriod}","type":"Dates"},{"name":"floor()","path":"stdlib/dates/#Base.floor-Tuple{TimeType,Period}","type":"Dates"},{"name":"Frequently Asked Questions","path":"manual/faq/","type":"Manual"},{"name":"Functions","path":"manual/functions/","type":"Manual"},{"name":"Getting Started","path":"manual/getting-started/","type":"Manual"},{"name":"Handling Operating System Variation","path":"manual/handling-operating-system-variation/","type":"Manual"},{"name":"Integers and Floating-Point Numbers","path":"manual/integers-and-floating-point-numbers/","type":"Manual"},{"name":"Interactive Utilities","path":"stdlib/interactiveutils/","type":"Interactive Utilities"},{"name":"InteractiveUtils.@code_llvm","path":"stdlib/interactiveutils/#InteractiveUtils.@code_llvm","type":"Interactive Utilities"},{"name":"InteractiveUtils.@code_lowered","path":"stdlib/interactiveutils/#InteractiveUtils.@code_lowered","type":"Interactive Utilities"},{"name":"InteractiveUtils.@code_native","path":"stdlib/interactiveutils/#InteractiveUtils.@code_native","type":"Interactive Utilities"},{"name":"InteractiveUtils.@code_typed","path":"stdlib/interactiveutils/#InteractiveUtils.@code_typed","type":"Interactive Utilities"},{"name":"InteractiveUtils.@code_warntype","path":"stdlib/interactiveutils/#InteractiveUtils.@code_warntype","type":"Interactive Utilities"},{"name":"InteractiveUtils.@edit","path":"stdlib/interactiveutils/#InteractiveUtils.@edit","type":"Interactive Utilities"},{"name":"InteractiveUtils.@functionloc","path":"stdlib/interactiveutils/#InteractiveUtils.@functionloc","type":"Interactive Utilities"},{"name":"InteractiveUtils.@less","path":"stdlib/interactiveutils/#InteractiveUtils.@less","type":"Interactive Utilities"},{"name":"InteractiveUtils.@which","path":"stdlib/interactiveutils/#InteractiveUtils.@which","type":"Interactive Utilities"},{"name":"InteractiveUtils.clipboard()","path":"stdlib/interactiveutils/#InteractiveUtils.clipboard","type":"Interactive Utilities"},{"name":"InteractiveUtils.code_llvm()","path":"stdlib/interactiveutils/#InteractiveUtils.code_llvm","type":"Interactive Utilities"},{"name":"InteractiveUtils.code_native()","path":"stdlib/interactiveutils/#InteractiveUtils.code_native","type":"Interactive Utilities"},{"name":"InteractiveUtils.code_warntype()","path":"stdlib/interactiveutils/#InteractiveUtils.code_warntype","type":"Interactive Utilities"},{"name":"InteractiveUtils.edit()","path":"stdlib/interactiveutils/#InteractiveUtils.edit-Tuple{AbstractString,Integer}","type":"Interactive Utilities"},{"name":"InteractiveUtils.edit()","path":"stdlib/interactiveutils/#InteractiveUtils.edit-Tuple{Any}","type":"Interactive Utilities"},{"name":"InteractiveUtils.less()","path":"stdlib/interactiveutils/#InteractiveUtils.less-Tuple{Any}","type":"Interactive Utilities"},{"name":"InteractiveUtils.less()","path":"stdlib/interactiveutils/#InteractiveUtils.less-Tuple{AbstractString}","type":"Interactive Utilities"},{"name":"InteractiveUtils.methodswith()","path":"stdlib/interactiveutils/#InteractiveUtils.methodswith","type":"Interactive Utilities"},{"name":"InteractiveUtils.subtypes()","path":"stdlib/interactiveutils/#InteractiveUtils.subtypes","type":"Interactive Utilities"},{"name":"InteractiveUtils.varinfo()","path":"stdlib/interactiveutils/#InteractiveUtils.varinfo","type":"Interactive Utilities"},{"name":"InteractiveUtils.versioninfo()","path":"stdlib/interactiveutils/#InteractiveUtils.versioninfo","type":"Interactive Utilities"},{"name":"Interfaces","path":"manual/interfaces/","type":"Manual"},{"name":"inv()","path":"stdlib/linearalgebra/#Base.inv-Tuple{AbstractArray{T,2} where T}","type":"Linear Algebra"},{"name":"isready()","path":"stdlib/distributed/#Base.isready-Tuple{RemoteChannel,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"isready()","path":"stdlib/distributed/#Base.isready-Tuple{Future}","type":"Distributed Computing"},{"name":"kill()","path":"stdlib/distributed/#Base.kill-Tuple{ClusterManager,Int64,WorkerConfig}","type":"Distributed Computing"},{"name":"kron()","path":"stdlib/linearalgebra/#Base.kron","type":"Linear Algebra"},{"name":"Libdl.dlclose()","path":"stdlib/libdl/#Libdl.dlclose","type":"Dynamic Linker"},{"name":"Libdl.dlext","path":"stdlib/libdl/#Libdl.dlext","type":"Dynamic Linker"},{"name":"Libdl.dlopen()","path":"stdlib/libdl/#Libdl.dlopen","type":"Dynamic Linker"},{"name":"Libdl.dlopen_e()","path":"stdlib/libdl/#Libdl.dlopen_e","type":"Dynamic Linker"},{"name":"Libdl.dlsym()","path":"stdlib/libdl/#Libdl.dlsym","type":"Dynamic Linker"},{"name":"Libdl.dlsym_e()","path":"stdlib/libdl/#Libdl.dlsym_e","type":"Dynamic Linker"},{"name":"Libdl.find_library()","path":"stdlib/libdl/#Libdl.find_library","type":"Dynamic Linker"},{"name":"Libdl.RTLD_NOW","path":"stdlib/libdl/#Libdl.RTLD_NOW","type":"Dynamic Linker"},{"name":"LibGit2","path":"stdlib/libgit2/","type":"LibGit2"},{"name":"LibGit2.@githash_str","path":"stdlib/libgit2/#LibGit2.@githash_str","type":"LibGit2"},{"name":"LibGit2.add!()","path":"stdlib/libgit2/#LibGit2.add!","type":"LibGit2"},{"name":"LibGit2.addblob!()","path":"stdlib/libgit2/#LibGit2.addblob!","type":"LibGit2"},{"name":"LibGit2.add_fetch!()","path":"stdlib/libgit2/#LibGit2.add_fetch!","type":"LibGit2"},{"name":"LibGit2.add_push!()","path":"stdlib/libgit2/#LibGit2.add_push!","type":"LibGit2"},{"name":"LibGit2.approve()","path":"stdlib/libgit2/#LibGit2.approve","type":"LibGit2"},{"name":"LibGit2.author()","path":"stdlib/libgit2/#LibGit2.author","type":"LibGit2"},{"name":"LibGit2.authors()","path":"stdlib/libgit2/#LibGit2.authors","type":"LibGit2"},{"name":"LibGit2.BlameOptions","path":"stdlib/libgit2/#LibGit2.BlameOptions","type":"LibGit2"},{"name":"LibGit2.branch!()","path":"stdlib/libgit2/#LibGit2.branch!","type":"LibGit2"},{"name":"LibGit2.branch()","path":"stdlib/libgit2/#LibGit2.branch","type":"LibGit2"},{"name":"LibGit2.Buffer","path":"stdlib/libgit2/#LibGit2.Buffer","type":"LibGit2"},{"name":"LibGit2.CachedCredentials","path":"stdlib/libgit2/#LibGit2.CachedCredentials","type":"LibGit2"},{"name":"LibGit2.checkout!()","path":"stdlib/libgit2/#LibGit2.checkout!","type":"LibGit2"},{"name":"LibGit2.CheckoutOptions","path":"stdlib/libgit2/#LibGit2.CheckoutOptions","type":"LibGit2"},{"name":"LibGit2.clone()","path":"stdlib/libgit2/#LibGit2.clone","type":"LibGit2"},{"name":"LibGit2.CloneOptions","path":"stdlib/libgit2/#LibGit2.CloneOptions","type":"LibGit2"},{"name":"LibGit2.commit()","path":"stdlib/libgit2/#LibGit2.commit","type":"LibGit2"},{"name":"LibGit2.committer()","path":"stdlib/libgit2/#LibGit2.committer","type":"LibGit2"},{"name":"LibGit2.count()","path":"stdlib/libgit2/#LibGit2.count","type":"LibGit2"},{"name":"LibGit2.counthunks()","path":"stdlib/libgit2/#LibGit2.counthunks","type":"LibGit2"},{"name":"LibGit2.create_branch()","path":"stdlib/libgit2/#LibGit2.create_branch","type":"LibGit2"},{"name":"LibGit2.CredentialPayload","path":"stdlib/libgit2/#LibGit2.CredentialPayload","type":"LibGit2"},{"name":"LibGit2.credentials_callback()","path":"stdlib/libgit2/#LibGit2.credentials_callback","type":"LibGit2"},{"name":"LibGit2.credentials_cb()","path":"stdlib/libgit2/#LibGit2.credentials_cb","type":"LibGit2"},{"name":"LibGit2.default_signature()","path":"stdlib/libgit2/#LibGit2.default_signature","type":"LibGit2"},{"name":"LibGit2.delete_branch()","path":"stdlib/libgit2/#LibGit2.delete_branch","type":"LibGit2"},{"name":"LibGit2.DescribeFormatOptions","path":"stdlib/libgit2/#LibGit2.DescribeFormatOptions","type":"LibGit2"},{"name":"LibGit2.DescribeOptions","path":"stdlib/libgit2/#LibGit2.DescribeOptions","type":"LibGit2"},{"name":"LibGit2.DiffDelta","path":"stdlib/libgit2/#LibGit2.DiffDelta","type":"LibGit2"},{"name":"LibGit2.DiffFile","path":"stdlib/libgit2/#LibGit2.DiffFile","type":"LibGit2"},{"name":"LibGit2.DiffOptionsStruct","path":"stdlib/libgit2/#LibGit2.DiffOptionsStruct","type":"LibGit2"},{"name":"LibGit2.diff_files()","path":"stdlib/libgit2/#LibGit2.diff_files","type":"LibGit2"},{"name":"LibGit2.entryid()","path":"stdlib/libgit2/#LibGit2.entryid","type":"LibGit2"},{"name":"LibGit2.entrytype()","path":"stdlib/libgit2/#LibGit2.entrytype","type":"LibGit2"},{"name":"LibGit2.features()","path":"stdlib/libgit2/#LibGit2.features","type":"LibGit2"},{"name":"LibGit2.fetch()","path":"stdlib/libgit2/#LibGit2.fetch","type":"LibGit2"},{"name":"LibGit2.FetchHead","path":"stdlib/libgit2/#LibGit2.FetchHead","type":"LibGit2"},{"name":"LibGit2.fetchheads()","path":"stdlib/libgit2/#LibGit2.fetchheads","type":"LibGit2"},{"name":"LibGit2.fetchhead_foreach_cb()","path":"stdlib/libgit2/#LibGit2.fetchhead_foreach_cb","type":"LibGit2"},{"name":"LibGit2.FetchOptions","path":"stdlib/libgit2/#LibGit2.FetchOptions","type":"LibGit2"},{"name":"LibGit2.fetch_refspecs()","path":"stdlib/libgit2/#LibGit2.fetch_refspecs","type":"LibGit2"},{"name":"LibGit2.ffmerge!()","path":"stdlib/libgit2/#LibGit2.ffmerge!","type":"LibGit2"},{"name":"LibGit2.filemode()","path":"stdlib/libgit2/#LibGit2.filemode","type":"LibGit2"},{"name":"LibGit2.filename()","path":"stdlib/libgit2/#LibGit2.filename","type":"LibGit2"},{"name":"LibGit2.fullname()","path":"stdlib/libgit2/#LibGit2.fullname","type":"LibGit2"},{"name":"LibGit2.GitAnnotated","path":"stdlib/libgit2/#LibGit2.GitAnnotated","type":"LibGit2"},{"name":"LibGit2.GitBlame","path":"stdlib/libgit2/#LibGit2.GitBlame","type":"LibGit2"},{"name":"LibGit2.GitBlob","path":"stdlib/libgit2/#LibGit2.GitBlob","type":"LibGit2"},{"name":"LibGit2.GitCommit","path":"stdlib/libgit2/#LibGit2.GitCommit","type":"LibGit2"},{"name":"LibGit2.gitdir()","path":"stdlib/libgit2/#LibGit2.gitdir","type":"LibGit2"},{"name":"LibGit2.GitHash","path":"stdlib/libgit2/#LibGit2.GitHash","type":"LibGit2"},{"name":"LibGit2.GitObject","path":"stdlib/libgit2/#LibGit2.GitObject","type":"LibGit2"},{"name":"LibGit2.GitObject()","path":"stdlib/libgit2/#LibGit2.GitObject-Tuple{LibGit2.GitTreeEntry}","type":"LibGit2"},{"name":"LibGit2.GitRemote","path":"stdlib/libgit2/#LibGit2.GitRemote","type":"LibGit2"},{"name":"LibGit2.GitRemoteAnon()","path":"stdlib/libgit2/#LibGit2.GitRemoteAnon","type":"LibGit2"},{"name":"LibGit2.GitRepo","path":"stdlib/libgit2/#LibGit2.GitRepo","type":"LibGit2"},{"name":"LibGit2.GitRepoExt()","path":"stdlib/libgit2/#LibGit2.GitRepoExt","type":"LibGit2"},{"name":"LibGit2.GitRevWalker","path":"stdlib/libgit2/#LibGit2.GitRevWalker","type":"LibGit2"},{"name":"LibGit2.GitShortHash","path":"stdlib/libgit2/#LibGit2.GitShortHash","type":"LibGit2"},{"name":"LibGit2.GitSignature","path":"stdlib/libgit2/#LibGit2.GitSignature","type":"LibGit2"},{"name":"LibGit2.GitStatus","path":"stdlib/libgit2/#LibGit2.GitStatus","type":"LibGit2"},{"name":"LibGit2.GitTag","path":"stdlib/libgit2/#LibGit2.GitTag","type":"LibGit2"},{"name":"LibGit2.GitTree","path":"stdlib/libgit2/#LibGit2.GitTree","type":"LibGit2"},{"name":"LibGit2.git_url()","path":"stdlib/libgit2/#LibGit2.git_url","type":"LibGit2"},{"name":"LibGit2.head!()","path":"stdlib/libgit2/#LibGit2.head!","type":"LibGit2"},{"name":"LibGit2.head()","path":"stdlib/libgit2/#LibGit2.head","type":"LibGit2"},{"name":"LibGit2.headname()","path":"stdlib/libgit2/#LibGit2.headname","type":"LibGit2"},{"name":"LibGit2.head_oid()","path":"stdlib/libgit2/#LibGit2.head_oid","type":"LibGit2"},{"name":"LibGit2.IndexEntry","path":"stdlib/libgit2/#LibGit2.IndexEntry","type":"LibGit2"},{"name":"LibGit2.IndexTime","path":"stdlib/libgit2/#LibGit2.IndexTime","type":"LibGit2"},{"name":"LibGit2.init()","path":"stdlib/libgit2/#LibGit2.init","type":"LibGit2"},{"name":"LibGit2.isbinary()","path":"stdlib/libgit2/#LibGit2.isbinary","type":"LibGit2"},{"name":"LibGit2.iscommit()","path":"stdlib/libgit2/#LibGit2.iscommit","type":"LibGit2"},{"name":"LibGit2.isdiff()","path":"stdlib/libgit2/#LibGit2.isdiff","type":"LibGit2"},{"name":"LibGit2.isdirty()","path":"stdlib/libgit2/#LibGit2.isdirty","type":"LibGit2"},{"name":"LibGit2.isfilled()","path":"stdlib/libgit2/#LibGit2.isfilled","type":"LibGit2"},{"name":"LibGit2.isorphan()","path":"stdlib/libgit2/#LibGit2.isorphan","type":"LibGit2"},{"name":"LibGit2.isset()","path":"stdlib/libgit2/#LibGit2.isset","type":"LibGit2"},{"name":"LibGit2.iszero()","path":"stdlib/libgit2/#LibGit2.iszero","type":"LibGit2"},{"name":"LibGit2.is_ancestor_of()","path":"stdlib/libgit2/#LibGit2.is_ancestor_of","type":"LibGit2"},{"name":"LibGit2.lookup_branch()","path":"stdlib/libgit2/#LibGit2.lookup_branch","type":"LibGit2"},{"name":"LibGit2.map()","path":"stdlib/libgit2/#LibGit2.map","type":"LibGit2"},{"name":"LibGit2.merge!()","path":"stdlib/libgit2/#LibGit2.merge!-Tuple{GitRepo,Array{LibGit2.GitAnnotated,1}}","type":"LibGit2"},{"name":"LibGit2.merge!()","path":"stdlib/libgit2/#LibGit2.merge!-Tuple{GitRepo,Array{LibGit2.GitAnnotated,1},Bool}","type":"LibGit2"},{"name":"LibGit2.merge!()","path":"stdlib/libgit2/#LibGit2.merge!-Tuple{GitRepo}","type":"LibGit2"},{"name":"LibGit2.MergeOptions","path":"stdlib/libgit2/#LibGit2.MergeOptions","type":"LibGit2"},{"name":"LibGit2.merge_analysis()","path":"stdlib/libgit2/#LibGit2.merge_analysis","type":"LibGit2"},{"name":"LibGit2.merge_base()","path":"stdlib/libgit2/#LibGit2.merge_base","type":"LibGit2"},{"name":"LibGit2.message()","path":"stdlib/libgit2/#LibGit2.message","type":"LibGit2"},{"name":"LibGit2.mirror_callback()","path":"stdlib/libgit2/#LibGit2.mirror_callback","type":"LibGit2"},{"name":"LibGit2.mirror_cb()","path":"stdlib/libgit2/#LibGit2.mirror_cb","type":"LibGit2"},{"name":"LibGit2.name()","path":"stdlib/libgit2/#LibGit2.name","type":"LibGit2"},{"name":"LibGit2.need_update()","path":"stdlib/libgit2/#LibGit2.need_update","type":"LibGit2"},{"name":"LibGit2.objtype()","path":"stdlib/libgit2/#LibGit2.objtype","type":"LibGit2"},{"name":"LibGit2.path()","path":"stdlib/libgit2/#LibGit2.path","type":"LibGit2"},{"name":"LibGit2.peel()","path":"stdlib/libgit2/#LibGit2.peel","type":"LibGit2"},{"name":"LibGit2.posixpath()","path":"stdlib/libgit2/#LibGit2.posixpath","type":"LibGit2"},{"name":"LibGit2.ProxyOptions","path":"stdlib/libgit2/#LibGit2.ProxyOptions","type":"LibGit2"},{"name":"LibGit2.push!()","path":"stdlib/libgit2/#LibGit2.push!-Tuple{LibGit2.GitRevWalker,LibGit2.GitHash}","type":"LibGit2"},{"name":"LibGit2.push()","path":"stdlib/libgit2/#LibGit2.push","type":"LibGit2"},{"name":"LibGit2.PushOptions","path":"stdlib/libgit2/#LibGit2.PushOptions","type":"LibGit2"},{"name":"LibGit2.push_head!()","path":"stdlib/libgit2/#LibGit2.push_head!","type":"LibGit2"},{"name":"LibGit2.push_refspecs()","path":"stdlib/libgit2/#LibGit2.push_refspecs","type":"LibGit2"},{"name":"LibGit2.raw()","path":"stdlib/libgit2/#LibGit2.raw","type":"LibGit2"},{"name":"LibGit2.read_tree!()","path":"stdlib/libgit2/#LibGit2.read_tree!","type":"LibGit2"},{"name":"LibGit2.rebase!()","path":"stdlib/libgit2/#LibGit2.rebase!","type":"LibGit2"},{"name":"LibGit2.RebaseOperation","path":"stdlib/libgit2/#LibGit2.RebaseOperation","type":"LibGit2"},{"name":"LibGit2.RebaseOptions","path":"stdlib/libgit2/#LibGit2.RebaseOptions","type":"LibGit2"},{"name":"LibGit2.reftype()","path":"stdlib/libgit2/#LibGit2.reftype","type":"LibGit2"},{"name":"LibGit2.ref_list()","path":"stdlib/libgit2/#LibGit2.ref_list","type":"LibGit2"},{"name":"LibGit2.reject()","path":"stdlib/libgit2/#LibGit2.reject","type":"LibGit2"},{"name":"LibGit2.RemoteCallbacks","path":"stdlib/libgit2/#LibGit2.RemoteCallbacks","type":"LibGit2"},{"name":"LibGit2.remotes()","path":"stdlib/libgit2/#LibGit2.remotes","type":"LibGit2"},{"name":"LibGit2.remove!()","path":"stdlib/libgit2/#LibGit2.remove!","type":"LibGit2"},{"name":"LibGit2.reset!()","path":"stdlib/libgit2/#LibGit2.reset!","type":"LibGit2"},{"name":"LibGit2.reset()","path":"stdlib/libgit2/#LibGit2.reset","type":"LibGit2"},{"name":"LibGit2.restore()","path":"stdlib/libgit2/#LibGit2.restore","type":"LibGit2"},{"name":"LibGit2.revcount()","path":"stdlib/libgit2/#LibGit2.revcount","type":"LibGit2"},{"name":"LibGit2.set_remote_url()","path":"stdlib/libgit2/#LibGit2.set_remote_url","type":"LibGit2"},{"name":"LibGit2.shortname()","path":"stdlib/libgit2/#LibGit2.shortname","type":"LibGit2"},{"name":"LibGit2.SignatureStruct","path":"stdlib/libgit2/#LibGit2.SignatureStruct","type":"LibGit2"},{"name":"LibGit2.snapshot()","path":"stdlib/libgit2/#LibGit2.snapshot","type":"LibGit2"},{"name":"LibGit2.split_cfg_entry()","path":"stdlib/libgit2/#LibGit2.split_cfg_entry","type":"LibGit2"},{"name":"LibGit2.SSHCredential","path":"stdlib/libgit2/#LibGit2.SSHCredential","type":"LibGit2"},{"name":"LibGit2.stage()","path":"stdlib/libgit2/#LibGit2.stage","type":"LibGit2"},{"name":"LibGit2.status()","path":"stdlib/libgit2/#LibGit2.status","type":"LibGit2"},{"name":"LibGit2.StatusEntry","path":"stdlib/libgit2/#LibGit2.StatusEntry","type":"LibGit2"},{"name":"LibGit2.StatusOptions","path":"stdlib/libgit2/#LibGit2.StatusOptions","type":"LibGit2"},{"name":"LibGit2.StrArrayStruct","path":"stdlib/libgit2/#LibGit2.StrArrayStruct","type":"LibGit2"},{"name":"LibGit2.tag_create()","path":"stdlib/libgit2/#LibGit2.tag_create","type":"LibGit2"},{"name":"LibGit2.tag_delete()","path":"stdlib/libgit2/#LibGit2.tag_delete","type":"LibGit2"},{"name":"LibGit2.tag_list()","path":"stdlib/libgit2/#LibGit2.tag_list","type":"LibGit2"},{"name":"LibGit2.target()","path":"stdlib/libgit2/#LibGit2.target","type":"LibGit2"},{"name":"LibGit2.TimeStruct","path":"stdlib/libgit2/#LibGit2.TimeStruct","type":"LibGit2"},{"name":"LibGit2.toggle()","path":"stdlib/libgit2/#LibGit2.toggle","type":"LibGit2"},{"name":"LibGit2.transact()","path":"stdlib/libgit2/#LibGit2.transact","type":"LibGit2"},{"name":"LibGit2.treewalk()","path":"stdlib/libgit2/#LibGit2.treewalk","type":"LibGit2"},{"name":"LibGit2.update!()","path":"stdlib/libgit2/#LibGit2.update!","type":"LibGit2"},{"name":"LibGit2.upstream()","path":"stdlib/libgit2/#LibGit2.upstream","type":"LibGit2"},{"name":"LibGit2.url()","path":"stdlib/libgit2/#LibGit2.url","type":"LibGit2"},{"name":"LibGit2.UserPasswordCredential","path":"stdlib/libgit2/#LibGit2.UserPasswordCredential","type":"LibGit2"},{"name":"LibGit2.version()","path":"stdlib/libgit2/#LibGit2.version","type":"LibGit2"},{"name":"LibGit2.with()","path":"stdlib/libgit2/#LibGit2.with","type":"LibGit2"},{"name":"LibGit2.with_warn()","path":"stdlib/libgit2/#LibGit2.with_warn","type":"LibGit2"},{"name":"LibGit2.workdir()","path":"stdlib/libgit2/#LibGit2.workdir","type":"LibGit2"},{"name":"Linear Algebra","path":"stdlib/linearalgebra/","type":"Linear Algebra"},{"name":"LinearAlgebra.adjoint!()","path":"stdlib/linearalgebra/#LinearAlgebra.adjoint!","type":"Linear Algebra"},{"name":"LinearAlgebra.axpy!()","path":"stdlib/linearalgebra/#LinearAlgebra.axpy!","type":"Linear Algebra"},{"name":"LinearAlgebra.Bidiagonal","path":"stdlib/linearalgebra/#LinearAlgebra.Bidiagonal","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.asum()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.asum","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.blascopy!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.blascopy!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.dotc()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.dotc","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.dotu()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.dotu","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gbmv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gbmv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gbmv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gbmv","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemm!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemm!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemm-NTuple{5,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemm-NTuple{4,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemv-Tuple{Any,Any,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.gemv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.gemv-NTuple{4,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.ger!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.ger!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.her!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.her!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.herk!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.herk!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.herk()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.herk","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.nrm2()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.nrm2","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.sbmv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.sbmv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.sbmv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.sbmv-NTuple{5,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.sbmv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.sbmv-NTuple{4,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.scal!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.scal!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.scal()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.scal","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.set_num_threads()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.set_num_threads","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symm!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symm!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symm-NTuple{5,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symm-NTuple{4,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symv-Tuple{Any,Any,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.symv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.symv-NTuple{4,Any}","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.syr!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.syr!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.syrk!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.syrk!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.syrk()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.syrk","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trmm!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trmm!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trmm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trmm","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trmv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trmv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trmv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trmv","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trsm!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trsm!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trsm()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trsm","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trsv!()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trsv!","type":"Linear Algebra"},{"name":"LinearAlgebra.BLAS.trsv()","path":"stdlib/linearalgebra/#LinearAlgebra.BLAS.trsv","type":"Linear Algebra"},{"name":"LinearAlgebra.bunchkaufman!()","path":"stdlib/linearalgebra/#LinearAlgebra.bunchkaufman!","type":"Linear Algebra"},{"name":"LinearAlgebra.bunchkaufman()","path":"stdlib/linearalgebra/#LinearAlgebra.bunchkaufman","type":"Linear Algebra"},{"name":"LinearAlgebra.checksquare()","path":"stdlib/linearalgebra/#LinearAlgebra.checksquare","type":"Linear Algebra"},{"name":"LinearAlgebra.cholesky!()","path":"stdlib/linearalgebra/#LinearAlgebra.cholesky!","type":"Linear Algebra"},{"name":"LinearAlgebra.cholesky()","path":"stdlib/linearalgebra/#LinearAlgebra.cholesky","type":"Linear Algebra"},{"name":"LinearAlgebra.cond()","path":"stdlib/linearalgebra/#LinearAlgebra.cond","type":"Linear Algebra"},{"name":"LinearAlgebra.condskeel()","path":"stdlib/linearalgebra/#LinearAlgebra.condskeel","type":"Linear Algebra"},{"name":"LinearAlgebra.cross()","path":"stdlib/linearalgebra/#LinearAlgebra.cross","type":"Linear Algebra"},{"name":"LinearAlgebra.det()","path":"stdlib/linearalgebra/#LinearAlgebra.det","type":"Linear Algebra"},{"name":"LinearAlgebra.diag()","path":"stdlib/linearalgebra/#LinearAlgebra.diag","type":"Linear Algebra"},{"name":"LinearAlgebra.diagind()","path":"stdlib/linearalgebra/#LinearAlgebra.diagind","type":"Linear Algebra"},{"name":"LinearAlgebra.diagm()","path":"stdlib/linearalgebra/#LinearAlgebra.diagm","type":"Linear Algebra"},{"name":"LinearAlgebra.Diagonal","path":"stdlib/linearalgebra/#LinearAlgebra.Diagonal","type":"Linear Algebra"},{"name":"LinearAlgebra.dot()","path":"stdlib/linearalgebra/#LinearAlgebra.dot","type":"Linear Algebra"},{"name":"LinearAlgebra.eigen!()","path":"stdlib/linearalgebra/#LinearAlgebra.eigen!","type":"Linear Algebra"},{"name":"LinearAlgebra.eigen()","path":"stdlib/linearalgebra/#LinearAlgebra.eigen","type":"Linear Algebra"},{"name":"LinearAlgebra.eigmax()","path":"stdlib/linearalgebra/#LinearAlgebra.eigmax","type":"Linear Algebra"},{"name":"LinearAlgebra.eigmin()","path":"stdlib/linearalgebra/#LinearAlgebra.eigmin","type":"Linear Algebra"},{"name":"LinearAlgebra.eigvals!()","path":"stdlib/linearalgebra/#LinearAlgebra.eigvals!","type":"Linear Algebra"},{"name":"LinearAlgebra.eigvals()","path":"stdlib/linearalgebra/#LinearAlgebra.eigvals","type":"Linear Algebra"},{"name":"LinearAlgebra.eigvecs()","path":"stdlib/linearalgebra/#LinearAlgebra.eigvecs","type":"Linear Algebra"},{"name":"LinearAlgebra.factorize()","path":"stdlib/linearalgebra/#LinearAlgebra.factorize","type":"Linear Algebra"},{"name":"LinearAlgebra.Givens","path":"stdlib/linearalgebra/#LinearAlgebra.Givens","type":"Linear Algebra"},{"name":"LinearAlgebra.givens()","path":"stdlib/linearalgebra/#LinearAlgebra.givens","type":"Linear Algebra"},{"name":"LinearAlgebra.Hermitian","path":"stdlib/linearalgebra/#LinearAlgebra.Hermitian","type":"Linear Algebra"},{"name":"LinearAlgebra.hessenberg!()","path":"stdlib/linearalgebra/#LinearAlgebra.hessenberg!","type":"Linear Algebra"},{"name":"LinearAlgebra.hessenberg()","path":"stdlib/linearalgebra/#LinearAlgebra.hessenberg","type":"Linear Algebra"},{"name":"LinearAlgebra.I","path":"stdlib/linearalgebra/#LinearAlgebra.I","type":"Linear Algebra"},{"name":"LinearAlgebra.isdiag()","path":"stdlib/linearalgebra/#LinearAlgebra.isdiag","type":"Linear Algebra"},{"name":"LinearAlgebra.ishermitian()","path":"stdlib/linearalgebra/#LinearAlgebra.ishermitian","type":"Linear Algebra"},{"name":"LinearAlgebra.isposdef!()","path":"stdlib/linearalgebra/#LinearAlgebra.isposdef!","type":"Linear Algebra"},{"name":"LinearAlgebra.isposdef()","path":"stdlib/linearalgebra/#LinearAlgebra.isposdef","type":"Linear Algebra"},{"name":"LinearAlgebra.issuccess()","path":"stdlib/linearalgebra/#LinearAlgebra.issuccess","type":"Linear Algebra"},{"name":"LinearAlgebra.issymmetric()","path":"stdlib/linearalgebra/#LinearAlgebra.issymmetric","type":"Linear Algebra"},{"name":"LinearAlgebra.istril()","path":"stdlib/linearalgebra/#LinearAlgebra.istril","type":"Linear Algebra"},{"name":"LinearAlgebra.istriu()","path":"stdlib/linearalgebra/#LinearAlgebra.istriu","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.bdsdc!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.bdsdc!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.bdsqr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.bdsqr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gbtrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gbtrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gbtrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gbtrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gebak!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gebak!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gebal!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gebal!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gebrd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gebrd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gecon!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gecon!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gees!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gees!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geev!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geev!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geevx!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geevx!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gehrd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gehrd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gelqf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gelqf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gels!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gels!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gelsd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gelsd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gelsy!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gelsy!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gemqrt!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gemqrt!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geqlf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geqlf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geqp3!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geqp3!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geqrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geqrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geqrt!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geqrt!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.geqrt3!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.geqrt3!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gerqf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gerqf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gesdd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gesdd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gesv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gesv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gesvd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gesvd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gesvx!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gesvx!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.getrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.getrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.getri!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.getri!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.getrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.getrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gges!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gges!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ggev!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ggev!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gglse!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gglse!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ggsvd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ggsvd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ggsvd3!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ggsvd3!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gtsv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gtsv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gttrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gttrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.gttrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.gttrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.hesv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.hesv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.hetrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.hetrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.hetri!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.hetri!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.hetrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.hetrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.orghr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.orghr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.orglq!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.orglq!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.orgql!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.orgql!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.orgqr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.orgqr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.orgrq!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.orgrq!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ormlq!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ormlq!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ormql!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ormql!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ormqr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ormqr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ormrq!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ormrq!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ormrz!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ormrz!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.posv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.posv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.potrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.potrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.potri!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.potri!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.potrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.potrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.pstrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.pstrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.ptsv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.ptsv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.pttrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.pttrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.pttrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.pttrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.stebz!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.stebz!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.stegr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.stegr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.stein!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.stein!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.stev!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.stev!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.syconv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.syconv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.syev!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.syev!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.syevr!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.syevr!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.sygvd!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.sygvd!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.sysv!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.sysv!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.sytrf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.sytrf!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.sytri!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.sytri!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.sytrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.sytrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.tgsen!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.tgsen!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trcon!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trcon!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trevc!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trevc!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trexc!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trexc!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trrfs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trrfs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trsen!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trsen!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trsyl!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trsyl!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trtri!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trtri!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.trtrs!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.trtrs!","type":"Linear Algebra"},{"name":"LinearAlgebra.LAPACK.tzrzf!()","path":"stdlib/linearalgebra/#LinearAlgebra.LAPACK.tzrzf!","type":"Linear Algebra"},{"name":"LinearAlgebra.ldiv!()","path":"stdlib/linearalgebra/#LinearAlgebra.ldiv!","type":"Linear Algebra"},{"name":"LinearAlgebra.ldlt!()","path":"stdlib/linearalgebra/#LinearAlgebra.ldlt!","type":"Linear Algebra"},{"name":"LinearAlgebra.ldlt()","path":"stdlib/linearalgebra/#LinearAlgebra.ldlt","type":"Linear Algebra"},{"name":"LinearAlgebra.lmul!()","path":"stdlib/linearalgebra/#LinearAlgebra.lmul!","type":"Linear Algebra"},{"name":"LinearAlgebra.logabsdet()","path":"stdlib/linearalgebra/#LinearAlgebra.logabsdet","type":"Linear Algebra"},{"name":"LinearAlgebra.logdet()","path":"stdlib/linearalgebra/#LinearAlgebra.logdet","type":"Linear Algebra"},{"name":"LinearAlgebra.LowerTriangular","path":"stdlib/linearalgebra/#LinearAlgebra.LowerTriangular","type":"Linear Algebra"},{"name":"LinearAlgebra.lowrankdowndate!()","path":"stdlib/linearalgebra/#LinearAlgebra.lowrankdowndate!","type":"Linear Algebra"},{"name":"LinearAlgebra.lowrankdowndate()","path":"stdlib/linearalgebra/#LinearAlgebra.lowrankdowndate","type":"Linear Algebra"},{"name":"LinearAlgebra.lowrankupdate!()","path":"stdlib/linearalgebra/#LinearAlgebra.lowrankupdate!","type":"Linear Algebra"},{"name":"LinearAlgebra.lowrankupdate()","path":"stdlib/linearalgebra/#LinearAlgebra.lowrankupdate","type":"Linear Algebra"},{"name":"LinearAlgebra.lq!()","path":"stdlib/linearalgebra/#LinearAlgebra.lq!","type":"Linear Algebra"},{"name":"LinearAlgebra.lq()","path":"stdlib/linearalgebra/#LinearAlgebra.lq","type":"Linear Algebra"},{"name":"LinearAlgebra.lu!()","path":"stdlib/linearalgebra/#LinearAlgebra.lu!","type":"Linear Algebra"},{"name":"LinearAlgebra.lu()","path":"stdlib/linearalgebra/#LinearAlgebra.lu","type":"Linear Algebra"},{"name":"LinearAlgebra.lyap()","path":"stdlib/linearalgebra/#LinearAlgebra.lyap","type":"Linear Algebra"},{"name":"LinearAlgebra.mul!()","path":"stdlib/linearalgebra/#LinearAlgebra.mul!","type":"Linear Algebra"},{"name":"LinearAlgebra.norm()","path":"stdlib/linearalgebra/#LinearAlgebra.norm","type":"Linear Algebra"},{"name":"LinearAlgebra.normalize!()","path":"stdlib/linearalgebra/#LinearAlgebra.normalize!","type":"Linear Algebra"},{"name":"LinearAlgebra.normalize()","path":"stdlib/linearalgebra/#LinearAlgebra.normalize","type":"Linear Algebra"},{"name":"LinearAlgebra.nullspace()","path":"stdlib/linearalgebra/#LinearAlgebra.nullspace","type":"Linear Algebra"},{"name":"LinearAlgebra.opnorm()","path":"stdlib/linearalgebra/#LinearAlgebra.opnorm","type":"Linear Algebra"},{"name":"LinearAlgebra.ordschur!()","path":"stdlib/linearalgebra/#LinearAlgebra.ordschur!","type":"Linear Algebra"},{"name":"LinearAlgebra.ordschur()","path":"stdlib/linearalgebra/#LinearAlgebra.ordschur","type":"Linear Algebra"},{"name":"LinearAlgebra.pinv()","path":"stdlib/linearalgebra/#LinearAlgebra.pinv","type":"Linear Algebra"},{"name":"LinearAlgebra.QR","path":"stdlib/linearalgebra/#LinearAlgebra.QR","type":"Linear Algebra"},{"name":"LinearAlgebra.qr!()","path":"stdlib/linearalgebra/#LinearAlgebra.qr!","type":"Linear Algebra"},{"name":"LinearAlgebra.qr()","path":"stdlib/linearalgebra/#LinearAlgebra.qr","type":"Linear Algebra"},{"name":"LinearAlgebra.QRCompactWY","path":"stdlib/linearalgebra/#LinearAlgebra.QRCompactWY","type":"Linear Algebra"},{"name":"LinearAlgebra.QRPivoted","path":"stdlib/linearalgebra/#LinearAlgebra.QRPivoted","type":"Linear Algebra"},{"name":"LinearAlgebra.rank()","path":"stdlib/linearalgebra/#LinearAlgebra.rank","type":"Linear Algebra"},{"name":"LinearAlgebra.rdiv!()","path":"stdlib/linearalgebra/#LinearAlgebra.rdiv!","type":"Linear Algebra"},{"name":"LinearAlgebra.rmul!()","path":"stdlib/linearalgebra/#LinearAlgebra.rmul!","type":"Linear Algebra"},{"name":"LinearAlgebra.schur!()","path":"stdlib/linearalgebra/#LinearAlgebra.schur!","type":"Linear Algebra"},{"name":"LinearAlgebra.schur()","path":"stdlib/linearalgebra/#LinearAlgebra.schur","type":"Linear Algebra"},{"name":"LinearAlgebra.stride1()","path":"stdlib/linearalgebra/#LinearAlgebra.stride1","type":"Linear Algebra"},{"name":"LinearAlgebra.svd!()","path":"stdlib/linearalgebra/#LinearAlgebra.svd!","type":"Linear Algebra"},{"name":"LinearAlgebra.svd()","path":"stdlib/linearalgebra/#LinearAlgebra.svd","type":"Linear Algebra"},{"name":"LinearAlgebra.svdvals!()","path":"stdlib/linearalgebra/#LinearAlgebra.svdvals!","type":"Linear Algebra"},{"name":"LinearAlgebra.svdvals()","path":"stdlib/linearalgebra/#LinearAlgebra.svdvals","type":"Linear Algebra"},{"name":"LinearAlgebra.sylvester()","path":"stdlib/linearalgebra/#LinearAlgebra.sylvester","type":"Linear Algebra"},{"name":"LinearAlgebra.Symmetric","path":"stdlib/linearalgebra/#LinearAlgebra.Symmetric","type":"Linear Algebra"},{"name":"LinearAlgebra.SymTridiagonal","path":"stdlib/linearalgebra/#LinearAlgebra.SymTridiagonal","type":"Linear Algebra"},{"name":"LinearAlgebra.tr()","path":"stdlib/linearalgebra/#LinearAlgebra.tr","type":"Linear Algebra"},{"name":"LinearAlgebra.transpose!()","path":"stdlib/linearalgebra/#LinearAlgebra.transpose!","type":"Linear Algebra"},{"name":"LinearAlgebra.Tridiagonal","path":"stdlib/linearalgebra/#LinearAlgebra.Tridiagonal","type":"Linear Algebra"},{"name":"LinearAlgebra.tril!()","path":"stdlib/linearalgebra/#LinearAlgebra.tril!","type":"Linear Algebra"},{"name":"LinearAlgebra.tril()","path":"stdlib/linearalgebra/#LinearAlgebra.tril","type":"Linear Algebra"},{"name":"LinearAlgebra.triu!()","path":"stdlib/linearalgebra/#LinearAlgebra.triu!","type":"Linear Algebra"},{"name":"LinearAlgebra.triu()","path":"stdlib/linearalgebra/#LinearAlgebra.triu","type":"Linear Algebra"},{"name":"LinearAlgebra.UniformScaling","path":"stdlib/linearalgebra/#LinearAlgebra.UniformScaling","type":"Linear Algebra"},{"name":"LinearAlgebra.UpperTriangular","path":"stdlib/linearalgebra/#LinearAlgebra.UpperTriangular","type":"Linear Algebra"},{"name":"log()","path":"stdlib/linearalgebra/#Base.log-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Logging","path":"stdlib/logging/","type":"Logging"},{"name":"Logging.ConsoleLogger","path":"stdlib/logging/#Logging.ConsoleLogger","type":"Logging"},{"name":"Markdown","path":"stdlib/markdown/","type":"Markdown"},{"name":"Math.acot()","path":"stdlib/linearalgebra/#Base.Math.acot-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.acoth()","path":"stdlib/linearalgebra/#Base.Math.acoth-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.acsc()","path":"stdlib/linearalgebra/#Base.Math.acsc-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.acsch()","path":"stdlib/linearalgebra/#Base.Math.acsch-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.asec()","path":"stdlib/linearalgebra/#Base.Math.asec-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.asech()","path":"stdlib/linearalgebra/#Base.Math.asech-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.cot()","path":"stdlib/linearalgebra/#Base.Math.cot-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.coth()","path":"stdlib/linearalgebra/#Base.Math.coth-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.csc()","path":"stdlib/linearalgebra/#Base.Math.csc-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.csch()","path":"stdlib/linearalgebra/#Base.Math.csch-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.sec()","path":"stdlib/linearalgebra/#Base.Math.sec-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.sech()","path":"stdlib/linearalgebra/#Base.Math.sech-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Math.sincos()","path":"Base.Math.sincos-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Real}","type":"Linear Algebra"},{"name":"Mathematical Operations and Elementary Functions","path":"manual/mathematical-operations/","type":"Manual"},{"name":"Memory-mapped I/O","path":"stdlib/mmap/","type":"Memory-mapped I/O"},{"name":"Metaprogramming","path":"manual/metaprogramming/","type":"Manual"},{"name":"Methods","path":"manual/methods/","type":"Manual"},{"name":"Missing Values","path":"manual/missing/","type":"Manual"},{"name":"Mmap.Anonymous","path":"stdlib/mmap/#Mmap.Anonymous","type":"Memory-mapped I/O"},{"name":"Mmap.mmap()","path":"stdlib/mmap/#Mmap.mmap","type":"Memory-mapped I/O"},{"name":"Mmap.sync!()","path":"stdlib/mmap/#Mmap.sync!","type":"Memory-mapped I/O"},{"name":"Modules","path":"manual/modules/","type":"Manual"},{"name":"Multi-dimensional Arrays","path":"manual/arrays/","type":"Manual"},{"name":"Networking and Streams","path":"manual/networking-and-streams/","type":"Manual"},{"name":"Noteworthy Differences from other Languages","path":"manual/noteworthy-differences/","type":"Manual"},{"name":"Parallel Computing","path":"manual/parallel-computing/","type":"Manual"},{"name":"Performance Tips","path":"manual/performance-tips/","type":"Manual"},{"name":"permute!()","path":"stdlib/sparsearrays/#Base.permute!-Union{Tuple{Tq}, Tuple{Tp}, Tuple{Ti}, Tuple{Tv}, Tuple{SparseMatrixCSC{Tv,Ti},SparseMatrixCSC{Tv,Ti},AbstractArray{Tp,1},AbstractArray{Tq,1}}} where Tq<:Integer where Tp<:Integer where Ti where Tv","type":"Sparse Arrays"},{"name":"Pkg","path":"stdlib/pkg/","type":"Pkg"},{"name":"Pkg.activate()","path":"stdlib/pkg/#Pkg.activate","type":"Pkg"},{"name":"Pkg.add()","path":"stdlib/pkg/#Pkg.add","type":"Pkg"},{"name":"Pkg.build()","path":"stdlib/pkg/#Pkg.build","type":"Pkg"},{"name":"Pkg.develop()","path":"stdlib/pkg/#Pkg.develop","type":"Pkg"},{"name":"Pkg.free()","path":"stdlib/pkg/#Pkg.free","type":"Pkg"},{"name":"Pkg.instantiate()","path":"stdlib/pkg/#Pkg.instantiate","type":"Pkg"},{"name":"Pkg.PackageMode","path":"stdlib/pkg/#Pkg.PackageMode","type":"Pkg"},{"name":"Pkg.PackageSpec","path":"stdlib/pkg/#Pkg.PackageSpec","type":"Pkg"},{"name":"Pkg.pin()","path":"stdlib/pkg/#Pkg.pin","type":"Pkg"},{"name":"Pkg.resolve()","path":"stdlib/pkg/#Pkg.resolve","type":"Pkg"},{"name":"Pkg.rm()","path":"stdlib/pkg/#Pkg.rm","type":"Pkg"},{"name":"Pkg.setprotocol!()","path":"stdlib/pkg/#Pkg.setprotocol!","type":"Pkg"},{"name":"Pkg.test()","path":"stdlib/pkg/#Pkg.test","type":"Pkg"},{"name":"Pkg.update()","path":"stdlib/pkg/#Pkg.update","type":"Pkg"},{"name":"Pkg.UpgradeLevel","path":"stdlib/pkg/#Pkg.UpgradeLevel","type":"Pkg"},{"name":"Printf","path":"stdlib/printf/","type":"Printf"},{"name":"Printf.@printf","path":"stdlib/printf/#Printf.@printf","type":"Printf"},{"name":"Printf.@sprintf","path":"stdlib/printf/#Printf.@sprintf","type":"Printf"},{"name":"Profile.@profile","path":"stdlib/profile/#Profile.@profile","type":"Profiling"},{"name":"Profile.callers()","path":"stdlib/profile/#Profile.callers","type":"Profiling"},{"name":"Profile.clear()","path":"stdlib/profile/#Profile.clear","type":"Profiling"},{"name":"Profile.clear_malloc_data()","path":"stdlib/profile/#Profile.clear_malloc_data","type":"Profiling"},{"name":"Profile.fetch()","path":"stdlib/profile/#Profile.fetch","type":"Profiling"},{"name":"Profile.init()","path":"stdlib/profile/#Profile.init","type":"Profiling"},{"name":"Profile.print()","path":"stdlib/profile/#Profile.print","type":"Profiling"},{"name":"Profile.retrieve()","path":"stdlib/profile/#Profile.retrieve","type":"Profiling"},{"name":"Profiling","path":"manual/profile/","type":"Manual"},{"name":"Profiling","path":"stdlib/profile/","type":"Profiling"},{"name":"put!()","path":"stdlib/distributed/#Base.put!-Tuple{Future,Any}","type":"Distributed Computing"},{"name":"put!()","path":"stdlib/distributed/#Base.put!-Tuple{RemoteChannel,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"rand()","path":"stdlib/random/#Base.rand","type":"Random Numbers"},{"name":"randn()","path":"stdlib/random/#Base.randn","type":"Random Numbers"},{"name":"Random Numbers","path":"stdlib/random/","type":"Random Numbers"},{"name":"Random.bitrand()","path":"stdlib/random/#Random.bitrand","type":"Random Numbers"},{"name":"Random.MersenneTwister","path":"stdlib/random/#Random.MersenneTwister","type":"Random Numbers"},{"name":"Random.rand!()","path":"stdlib/random/#Random.rand!","type":"Random Numbers"},{"name":"Random.randcycle!()","path":"stdlib/random/#Random.randcycle!","type":"Random Numbers"},{"name":"Random.randcycle()","path":"stdlib/random/#Random.randcycle","type":"Random Numbers"},{"name":"Random.randexp!()","path":"stdlib/random/#Random.randexp!","type":"Random Numbers"},{"name":"Random.randexp()","path":"stdlib/random/#Random.randexp","type":"Random Numbers"},{"name":"Random.randn!()","path":"stdlib/random/#Random.randn!","type":"Random Numbers"},{"name":"Random.RandomDevice","path":"stdlib/random/#Random.RandomDevice","type":"Random Numbers"},{"name":"Random.randperm!()","path":"stdlib/random/#Random.randperm!","type":"Random Numbers"},{"name":"Random.randperm()","path":"stdlib/random/#Random.randperm","type":"Random Numbers"},{"name":"Random.randstring()","path":"stdlib/random/#Random.randstring","type":"Random Numbers"},{"name":"Random.randsubseq!()","path":"stdlib/random/#Random.randsubseq!","type":"Random Numbers"},{"name":"Random.randsubseq()","path":"stdlib/random/#Random.randsubseq","type":"Random Numbers"},{"name":"Random.seed!()","path":"stdlib/random/#Random.seed!","type":"Random Numbers"},{"name":"Random.shuffle!()","path":"stdlib/random/#Random.shuffle!","type":"Random Numbers"},{"name":"Random.shuffle()","path":"stdlib/random/#Random.shuffle","type":"Random Numbers"},{"name":"round()","path":"stdlib/dates/#Base.round-Tuple{TimeType,Period,RoundingMode{:NearestTiesUp}}","type":"Dates"},{"name":"round()","path":"stdlib/dates/#Base.round-Tuple{Union{Day, Week, TimePeriod},Union{Day, Week, TimePeriod},RoundingMode{:NearestTiesUp}}","type":"Dates"},{"name":"Running External Programs","path":"manual/running-external-programs/","type":"Manual"},{"name":"runtests()","path":"stdlib/test/#Base.runtests","type":"Unit Testing"},{"name":"Scope of Variables","path":"manual/variables-and-scoping/","type":"Manual"},{"name":"Serialization","path":"stdlib/serialization/","type":"Serialization"},{"name":"Serialization.deserialize()","path":"stdlib/serialization/#Serialization.deserialize","type":"Serialization"},{"name":"Serialization.serialize()","path":"stdlib/serialization/#Serialization.serialize","type":"Serialization"},{"name":"Serialization.writeheader()","path":"stdlib/serialization/#Serialization.writeheader","type":"Serialization"},{"name":"SHA","path":"stdlib/sha/","type":"SHA"},{"name":"Shared Arrays","path":"stdlib/sharedarrays/","type":"Shared Arrays"},{"name":"SharedArrays.indexpids()","path":"stdlib/sharedarrays/#SharedArrays.indexpids","type":"Shared Arrays"},{"name":"SharedArrays.localindices()","path":"stdlib/sharedarrays/#SharedArrays.localindices","type":"Shared Arrays"},{"name":"SharedArrays.sdata()","path":"stdlib/sharedarrays/#SharedArrays.sdata","type":"Shared Arrays"},{"name":"SharedArrays.SharedArray","path":"stdlib/sharedarrays/#SharedArrays.SharedArray","type":"Shared Arrays"},{"name":"sin()","path":"Base.sin-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Real}","type":"Linear Algebra"},{"name":"sinh()","path":"stdlib/linearalgebra/#Base.sinh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Sockets","path":"stdlib/sockets/","type":"Sockets"},{"name":"Sockets.accept()","path":"stdlib/sockets/#Sockets.accept","type":"Sockets"},{"name":"Sockets.connect()","path":"stdlib/sockets/#Sockets.connect-Tuple{TCPSocket,Integer}","type":"Sockets"},{"name":"Sockets.connect()","path":"stdlib/distributed/#Sockets.connect-Tuple{ClusterManager,Int64,WorkerConfig}","type":"Distributed Computing"},{"name":"Sockets.connect()","path":"stdlib/sockets/#Sockets.connect-Tuple{AbstractString}","type":"Sockets"},{"name":"Sockets.getaddrinfo()","path":"stdlib/sockets/#Sockets.getaddrinfo","type":"Sockets"},{"name":"Sockets.getalladdrinfo()","path":"stdlib/sockets/#Sockets.getalladdrinfo","type":"Sockets"},{"name":"Sockets.getipaddr()","path":"stdlib/sockets/#Sockets.getipaddr","type":"Sockets"},{"name":"Sockets.getnameinfo()","path":"stdlib/sockets/#Sockets.getnameinfo","type":"Sockets"},{"name":"Sockets.getpeername()","path":"stdlib/sockets/#Sockets.getpeername","type":"Sockets"},{"name":"Sockets.getsockname()","path":"stdlib/sockets/#Sockets.getsockname","type":"Sockets"},{"name":"Sockets.IPv4","path":"stdlib/sockets/#Sockets.IPv4","type":"Sockets"},{"name":"Sockets.IPv6","path":"stdlib/sockets/#Sockets.IPv6","type":"Sockets"},{"name":"Sockets.listen()","path":"stdlib/sockets/#Sockets.listen-Tuple{AbstractString}","type":"Sockets"},{"name":"Sockets.listen()","path":"stdlib/sockets/#Sockets.listen-Tuple{Any}","type":"Sockets"},{"name":"Sockets.listenany()","path":"stdlib/sockets/#Sockets.listenany","type":"Sockets"},{"name":"Sockets.recv()","path":"stdlib/sockets/#Sockets.recv","type":"Sockets"},{"name":"Sockets.recvfrom()","path":"stdlib/sockets/#Sockets.recvfrom","type":"Sockets"},{"name":"Sockets.send()","path":"stdlib/sockets/#Sockets.send","type":"Sockets"},{"name":"Sockets.setopt()","path":"stdlib/sockets/#Sockets.setopt","type":"Sockets"},{"name":"Sockets.TCPSocket","path":"stdlib/sockets/#Sockets.TCPSocket","type":"Sockets"},{"name":"Sockets.UDPSocket","path":"stdlib/sockets/#Sockets.UDPSocket","type":"Sockets"},{"name":"Sparse Arrays","path":"stdlib/sparsearrays/","type":"Sparse Arrays"},{"name":"SparseArrays.blockdiag()","path":"stdlib/sparsearrays/#SparseArrays.blockdiag","type":"Sparse Arrays"},{"name":"SparseArrays.dropzeros!()","path":"stdlib/sparsearrays/#SparseArrays.dropzeros!","type":"Sparse Arrays"},{"name":"SparseArrays.dropzeros()","path":"stdlib/sparsearrays/#SparseArrays.dropzeros","type":"Sparse Arrays"},{"name":"SparseArrays.findnz()","path":"stdlib/sparsearrays/#SparseArrays.findnz","type":"Sparse Arrays"},{"name":"SparseArrays.issparse()","path":"stdlib/sparsearrays/#SparseArrays.issparse","type":"Sparse Arrays"},{"name":"SparseArrays.nnz()","path":"stdlib/sparsearrays/#SparseArrays.nnz","type":"Sparse Arrays"},{"name":"SparseArrays.nonzeros()","path":"stdlib/sparsearrays/#SparseArrays.nonzeros","type":"Sparse Arrays"},{"name":"SparseArrays.nzrange()","path":"stdlib/sparsearrays/#SparseArrays.nzrange","type":"Sparse Arrays"},{"name":"SparseArrays.permute()","path":"stdlib/sparsearrays/#SparseArrays.permute","type":"Sparse Arrays"},{"name":"SparseArrays.rowvals()","path":"stdlib/sparsearrays/#SparseArrays.rowvals","type":"Sparse Arrays"},{"name":"SparseArrays.sparse()","path":"stdlib/sparsearrays/#SparseArrays.sparse","type":"Sparse Arrays"},{"name":"SparseArrays.SparseMatrixCSC","path":"stdlib/sparsearrays/#SparseArrays.SparseMatrixCSC","type":"Sparse Arrays"},{"name":"SparseArrays.sparsevec()","path":"stdlib/sparsearrays/#SparseArrays.sparsevec","type":"Sparse Arrays"},{"name":"SparseArrays.SparseVector","path":"stdlib/sparsearrays/#SparseArrays.SparseVector","type":"Sparse Arrays"},{"name":"SparseArrays.spdiagm()","path":"stdlib/sparsearrays/#SparseArrays.spdiagm","type":"Sparse Arrays"},{"name":"SparseArrays.sprand()","path":"stdlib/sparsearrays/#SparseArrays.sprand","type":"Sparse Arrays"},{"name":"SparseArrays.sprandn()","path":"stdlib/sparsearrays/#SparseArrays.sprandn","type":"Sparse Arrays"},{"name":"SparseArrays.spzeros()","path":"stdlib/sparsearrays/#SparseArrays.spzeros","type":"Sparse Arrays"},{"name":"sqrt()","path":"Base.sqrt-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Real}","type":"Linear Algebra"},{"name":"Stack Traces","path":"manual/stacktraces/","type":"Manual"},{"name":"Statistics","path":"stdlib/statistics/","type":"Statistics"},{"name":"Statistics.cor()","path":"stdlib/statistics/#Statistics.cor","type":"Statistics"},{"name":"Statistics.cov()","path":"stdlib/statistics/#Statistics.cov","type":"Statistics"},{"name":"Statistics.mean!()","path":"stdlib/statistics/#Statistics.mean!","type":"Statistics"},{"name":"Statistics.mean()","path":"stdlib/statistics/#Statistics.mean","type":"Statistics"},{"name":"Statistics.median!()","path":"stdlib/statistics/#Statistics.median!","type":"Statistics"},{"name":"Statistics.median()","path":"stdlib/statistics/#Statistics.median","type":"Statistics"},{"name":"Statistics.middle()","path":"stdlib/statistics/#Statistics.middle","type":"Statistics"},{"name":"Statistics.quantile!()","path":"stdlib/statistics/#Statistics.quantile!","type":"Statistics"},{"name":"Statistics.quantile()","path":"stdlib/statistics/#Statistics.quantile","type":"Statistics"},{"name":"Statistics.std()","path":"stdlib/statistics/#Statistics.std","type":"Statistics"},{"name":"Statistics.stdm()","path":"stdlib/statistics/#Statistics.stdm","type":"Statistics"},{"name":"Statistics.var()","path":"stdlib/statistics/#Statistics.var","type":"Statistics"},{"name":"Statistics.varm()","path":"stdlib/statistics/#Statistics.varm","type":"Statistics"},{"name":"Strings","path":"manual/strings/","type":"Manual"},{"name":"Style Guide","path":"manual/style-guide/","type":"Manual"},{"name":"take!()","path":"stdlib/distributed/#Base.take!-Tuple{RemoteChannel,Vararg{Any,N} where N}","type":"Distributed Computing"},{"name":"tan()","path":"Base.tan-Tuple{Union{DenseArray{/#s37,2}, ReinterpretArray{#s37,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{#s37,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{#s37,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where #s37<:Real}","type":"Linear Algebra"},{"name":"tanh()","path":"stdlib/linearalgebra/#Base.tanh-Tuple{Union{DenseArray{T,2}, ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, AbstractCartesianIndex},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Tuple{AbstractUnitRange,Vararg{Any,N} where N} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T}","type":"Linear Algebra"},{"name":"Test.@inferred","path":"stdlib/test/#Test.@inferred","type":"Unit Testing"},{"name":"Test.@test","path":"stdlib/test/#Test.@test","type":"Unit Testing"},{"name":"Test.@testset","path":"stdlib/test/#Test.@testset","type":"Unit Testing"},{"name":"Test.@test_broken","path":"stdlib/test/#Test.@test_broken","type":"Unit Testing"},{"name":"Test.@test_deprecated","path":"stdlib/test/#Test.@test_deprecated","type":"Unit Testing"},{"name":"Test.@test_logs","path":"stdlib/test/#Test.@test_logs","type":"Unit Testing"},{"name":"Test.@test_nowarn","path":"stdlib/test/#Test.@test_nowarn","type":"Unit Testing"},{"name":"Test.@test_skip","path":"stdlib/test/#Test.@test_skip","type":"Unit Testing"},{"name":"Test.@test_throws","path":"stdlib/test/#Test.@test_throws","type":"Unit Testing"},{"name":"Test.@test_warn","path":"stdlib/test/#Test.@test_warn","type":"Unit Testing"},{"name":"Test.finish()","path":"stdlib/test/#Test.finish","type":"Unit Testing"},{"name":"Test.get_testset()","path":"stdlib/test/#Test.get_testset","type":"Unit Testing"},{"name":"Test.get_testset_depth()","path":"stdlib/test/#Test.get_testset_depth","type":"Unit Testing"},{"name":"Test.record()","path":"stdlib/test/#Test.record","type":"Unit Testing"},{"name":"The Julia REPL","path":"stdlib/repl/","type":"The Julia REPL"},{"name":"timedwait()","path":"stdlib/distributed/#Base.timedwait","type":"Distributed Computing"},{"name":"transpose()","path":"stdlib/linearalgebra/#Base.transpose","type":"Linear Algebra"},{"name":"trunc()","path":"stdlib/dates/#Base.trunc-Tuple{TimeType,Type{Period}}","type":"Dates"},{"name":"Types","path":"manual/types/","type":"Manual"},{"name":"Unicode","path":"stdlib/unicode/","type":"Unicode"},{"name":"Unicode Input","path":"manual/unicode-input/","type":"Manual"},{"name":"Unicode.graphemes()","path":"stdlib/unicode/#Unicode.graphemes","type":"Unicode"},{"name":"Unicode.isassigned()","path":"stdlib/unicode/#Unicode.isassigned","type":"Unicode"},{"name":"Unicode.normalize()","path":"stdlib/unicode/#Unicode.normalize","type":"Unicode"},{"name":"Unit Testing","path":"stdlib/test/","type":"Unit Testing"},{"name":"UUIDs","path":"stdlib/uuids/","type":"UUIDs"},{"name":"UUIDs.uuid1()","path":"stdlib/uuids/#UUIDs.uuid1","type":"UUIDs"},{"name":"UUIDs.uuid4()","path":"stdlib/uuids/#UUIDs.uuid4","type":"UUIDs"},{"name":"UUIDs.uuid_version()","path":"stdlib/uuids/#UUIDs.uuid_version","type":"UUIDs"},{"name":"Variables","path":"manual/variables/","type":"Manual"},{"name":"wait()","path":"stdlib/distributed/#Base.wait","type":"Distributed Computing"},{"name":"Workflow Tips","path":"manual/workflow-tips/","type":"Manual"},{"name":"\\()","path":"stdlib/linearalgebra/#Base.:\\\\-Tuple{AbstractArray{T,2} where T,Union{AbstractArray{T,1}, AbstractArray{T,2}} where T}","type":"Linear Algebra"}],"types":[{"name":"Base64","count":6,"slug":"base64"},{"name":"CRC32c","count":3,"slug":"crc32c"},{"name":"Dates","count":104,"slug":"dates"},{"name":"Delimited Files","count":8,"slug":"delimited-files"},{"name":"Distributed Computing","count":56,"slug":"distributed-computing"},{"name":"Dynamic Linker","count":10,"slug":"dynamic-linker"},{"name":"File Events","count":6,"slug":"file-events"},{"name":"Interactive Utilities","count":23,"slug":"interactive-utilities"},{"name":"LibGit2","count":147,"slug":"libgit2"},{"name":"Linear Algebra","count":251,"slug":"linear-algebra"},{"name":"Logging","count":15,"slug":"logging"},{"name":"Manual","count":35,"slug":"manual"},{"name":"Markdown","count":1,"slug":"markdown"},{"name":"Memory-mapped I/O","count":4,"slug":"memory-mapped-i-o"},{"name":"Pkg","count":16,"slug":"pkg"},{"name":"Printf","count":3,"slug":"printf"},{"name":"Profiling","count":9,"slug":"profiling"},{"name":"Random Numbers","count":20,"slug":"random-numbers"},{"name":"Serialization","count":4,"slug":"serialization"},{"name":"SHA","count":1,"slug":"sha"},{"name":"Shared Arrays","count":6,"slug":"shared-arrays"},{"name":"Sockets","count":22,"slug":"sockets"},{"name":"Sparse Arrays","count":20,"slug":"sparse-arrays"},{"name":"Statistics","count":14,"slug":"statistics"},{"name":"The Julia REPL","count":2,"slug":"the-julia-repl"},{"name":"Unicode","count":4,"slug":"unicode"},{"name":"Unit Testing","count":16,"slug":"unit-testing"},{"name":"UUIDs","count":4,"slug":"uuids"}]};